#!/usr/bin/env bash

# We need `declare` so that bash knows it is an associative array
declare -A colors
colors=(
    ["red"]="1;31m"
    ["green"]="0;32m"
    ["blue"]="0;34m"
    ["reset"]="0m"
    ["white"]="1;37m"
    ["teal"]="1;36m"
    ["purple"]="1;35m"
)

# $1: escape sequence
esc() {
    local sequence="$1"
    echo "\[\e[$sequence\]"
}

# Colors
red    () { echo `esc ${colors[red]}`;    }
green  () { echo `esc ${colors[green]}`;  }
blue   () { echo `esc ${colors[blue]}`;   }
reset  () { echo `esc ${colors[reset]}`;  }
white  () { echo `esc ${colors[white]}`;  }
teal   () { echo `esc ${colors[teal]}`;   }
purple () { echo `esc ${colors[purple]}`; }

# Special/escapable chars
newline () { echo "\n";     }
lambda  () { echo "\u03bb"; }
arrow   () { echo "\u2192"; }

# Commands
git_branch () { echo '`fd -H ".git$" . -q -d1 && git branch || echo ""`' ; }
status     () {
    echo "\`code=\"\$?\" ; if [[ \$code -eq 0 ]]; then echo \"$(green) \$code\"; else echo \"$(red) \$code\"; fi\`"
}

ps1() {
    local prompt=""

    elements=(
        `newline`
        `blue ; whoami`
        `white` @
        `red` `hostname`
        "`status`" ' ' `green` '\W'
        `teal` ' ' "`git_branch`"
        `newline` ' '
        `purple ; lambda`
        `white`
    )

    for e in "${elements[@]}"
    do
        prompt+="$e"
    done

    echo -e "$prompt "
}

ps1
